# Generated by Django 3.2.5 on 2021-07-05 10:46

import bot.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'admin'), ('employee', 'employee')], default='admin', max_length=10)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversation', jsonfield.fields.JSONField(default={'a': 'a'})),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('chat_type', models.CharField(choices=[('bot_chat', 'bot_chat'), ('user_chat', 'user_chat')], max_length=10)),
                ('saved_status', models.BooleanField(default=False)),
                ('trained_status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChatQuestionNew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_first', models.BooleanField(default=False)),
                ('is_option', models.BooleanField(default=False)),
                ('u_id', models.UUIDField(editable=False, null=True)),
                ('child_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('carousel_type', models.CharField(choices=[('single', 'single'), ('carousel', 'carousel')], max_length=10)),
                ('number', models.CharField(max_length=3)),
                ('parent', models.CharField(max_length=3)),
                ('is_new', models.BooleanField(default=True)),
                ('text', models.CharField(max_length=255)),
                ('form_type', models.CharField(choices=[('text-form', 'text-form'), ('card-form', 'card-form'), ('text-option-form', 'text-option-form'), ('card-option-form', 'card-option-form'), ('image-carousel-form', 'image-carousel-form'), ('card-carousel-form', 'card-carousel-form'), ('image-carousel-option-form', 'image-carousel-option-form'), ('card-carousel-option-form', 'card-carousel-option-form')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('secret_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('bot_name', models.CharField(default='Talking Bot', max_length=30)),
                ('image', models.ImageField(blank=True, null=True, upload_to=bot.models.company_image_upload_path)),
                ('color', models.CharField(default='#76b61b', max_length=10)),
                ('intro_ques', models.CharField(default='What help do you need', max_length=255)),
                ('bot_ques', models.CharField(default='Hi! you can ask anything', max_length=255)),
                ('bot_title', models.CharField(default='Talk to bot', max_length=30)),
                ('head_text_color', models.CharField(default='#ffffff', max_length=10)),
                ('intro_text_login', models.CharField(default='Please fill form to continue.', max_length=300)),
                ('service_provider', models.CharField(default='service provider', max_length=20)),
                ('language', models.CharField(choices=[('af', 'afrikaans'), ('sq', 'albanian'), ('am', 'amharic'), ('ar', 'arabic'), ('hy', 'armenian'), ('az', 'azerbaijani'), ('eu', 'basque'), ('be', 'belarusian'), ('bn', 'bengali'), ('bs', 'bosnian'), ('bg', 'bulgarian'), ('ca', 'catalan'), ('ceb', 'cebuano'), ('ny', 'chichewa'), ('zh-cn', 'chinese (simplified)'), ('zh-tw', 'chinese (traditional)'), ('co', 'corsican'), ('hr', 'croatian'), ('cs', 'czech'), ('da', 'danish'), ('nl', 'dutch'), ('en', 'english'), ('eo', 'esperanto'), ('et', 'estonian'), ('tl', 'filipino'), ('fi', 'finnish'), ('fr', 'french'), ('fy', 'frisian'), ('gl', 'galician'), ('ka', 'georgian'), ('de', 'german'), ('el', 'greek'), ('gu', 'gujarati'), ('ht', 'haitian creole'), ('ha', 'hausa'), ('haw', 'hawaiian'), ('iw', 'hebrew'), ('he', 'hebrew'), ('hi', 'hindi'), ('hmn', 'hmong'), ('hu', 'hungarian'), ('is', 'icelandic'), ('ig', 'igbo'), ('id', 'indonesian'), ('ga', 'irish'), ('it', 'italian'), ('ja', 'japanese'), ('jw', 'javanese'), ('kn', 'kannada'), ('kk', 'kazakh'), ('km', 'khmer'), ('ko', 'korean'), ('ku', 'kurdish (kurmanji)'), ('ky', 'kyrgyz'), ('lo', 'lao'), ('la', 'latin'), ('lv', 'latvian'), ('lt', 'lithuanian'), ('lb', 'luxembourgish'), ('mk', 'macedonian'), ('mg', 'malagasy'), ('ms', 'malay'), ('ml', 'malayalam'), ('mt', 'maltese'), ('mi', 'maori'), ('mr', 'marathi'), ('mn', 'mongolian'), ('my', 'myanmar (burmese)'), ('ne', 'nepali'), ('no', 'norwegian'), ('or', 'odia'), ('ps', 'pashto'), ('fa', 'persian'), ('pl', 'polish'), ('pt', 'portuguese'), ('pa', 'punjabi'), ('ro', 'romanian'), ('ru', 'russian'), ('sm', 'samoan'), ('gd', 'scots gaelic'), ('sr', 'serbian'), ('st', 'sesotho'), ('sn', 'shona'), ('sd', 'sindhi'), ('si', 'sinhala'), ('sk', 'slovak'), ('sl', 'slovenian'), ('so', 'somali'), ('es', 'spanish'), ('su', 'sundanese'), ('sw', 'swahili'), ('sv', 'swedish'), ('tg', 'tajik'), ('ta', 'tamil'), ('te', 'telugu'), ('th', 'thai'), ('tr', 'turkish'), ('uk', 'ukrainian'), ('ur', 'urdu'), ('ug', 'uyghur'), ('uz', 'uzbek'), ('vi', 'vietnamese'), ('cy', 'welsh'), ('xh', 'xhosa'), ('yi', 'yiddish'), ('yo', 'yoruba'), ('zu', 'zulu')], default='en', max_length=15)),
                ('active', models.BooleanField(default=False)),
                ('provider_line', models.CharField(default='Please select the service provider', max_length=500)),
                ('slot_line', models.CharField(default='Please select the slot', max_length=500)),
                ('active_date', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=254)),
                ('u_field', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_customer', to='bot.company')),
            ],
        ),
        migrations.CreateModel(
            name='ParentCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('secret_key', models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_provider', to='bot.company')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_provider', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('bot_allowed', models.IntegerField()),
                ('currency', models.CharField(default='USD', max_length=5)),
                ('name', models.CharField(max_length=30)),
                ('is_default', models.BooleanField(default=False)),
                ('u_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.TimeField()),
                ('end', models.TimeField()),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('day', jsonfield.fields.JSONField(default={'day': 'All'})),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_slot', to='bot.serviceprovider')),
            ],
        ),
        migrations.CreateModel(
            name='TakenSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('paid', models.BooleanField(default=False)),
                ('expire_date', models.DateTimeField()),
                ('remaining_bot', models.IntegerField(default=1)),
                ('parent_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to='bot.parentcompany')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to='bot.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='SingleChatQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=bot.models.company_question_upload_path)),
                ('url', models.URLField(blank=True, null=True)),
                ('options', jsonfield.fields.JSONField(blank=True, null=True)),
                ('single_text', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('chat_title', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='single_chat_question', to='bot.chatquestionnew')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.TextField()),
                ('company', models.ForeignKey(default='1', on_delete=django.db.models.deletion.CASCADE, related_name='company_tag', to='bot.company')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', jsonfield.fields.JSONField()),
                ('if_trained', models.BooleanField(default=False)),
                ('question_tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='question_tag_name', to='bot.questiontag')),
            ],
        ),
        migrations.CreateModel(
            name='NotifyNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0)),
                ('note_type', models.CharField(choices=[('note_no', 'note_no'), ('note_yes', 'note_yes')], max_length=30)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_not_number', to='bot.company')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('read_status', models.BooleanField(default=False)),
                ('time_added', models.DateTimeField(auto_now_add=True)),
                ('note_type', models.CharField(choices=[('note_no', 'note_no'), ('note_yes', 'note_yes')], max_length=30)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comp_notify', to='bot.company')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cust_notify', to='bot.customer')),
            ],
        ),
        migrations.CreateModel(
            name='FacebookBotDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_key', models.CharField(blank=True, max_length=255, null=True)),
                ('verify_key', models.CharField(max_length=8, unique=True)),
                ('page_id', models.CharField(blank=True, max_length=30, null=True, unique=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='facebook_bot', to='bot.company')),
            ],
        ),
        migrations.CreateModel(
            name='EmpNotifyNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_not_number', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmpNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('read_status', models.BooleanField(default=False)),
                ('time_added', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cust_emp_notify', to='bot.customer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_emp_notify', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(null=True)),
                ('answer', models.TextField(null=True)),
                ('time', models.TimeField(auto_now_add=True)),
                ('history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_history', to='bot.chathistory')),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='parent_company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companies', to='bot.parentcompany'),
        ),
        migrations.CreateModel(
            name='ChatTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=False)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_chat_title', to='bot.company')),
            ],
            options={
                'unique_together': {('company', 'title')},
            },
        ),
        migrations.AddField(
            model_name='chatquestionnew',
            name='chat_title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_titles', to='bot.chattitle'),
        ),
        migrations.CreateModel(
            name='ChatQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('text', 'text'), ('option', 'option')], max_length=10)),
                ('question', models.CharField(max_length=256)),
                ('number', models.IntegerField()),
                ('parent', models.IntegerField(blank=True, null=True)),
                ('options', jsonfield.fields.JSONField(blank=True, null=True)),
                ('images', models.ImageField(blank=True, null=True, upload_to='')),
                ('is_new', models.BooleanField(default=False)),
                ('chat_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_question', to='bot.chattitle')),
            ],
        ),
        migrations.AddField(
            model_name='chathistory',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_chat', to='bot.company'),
        ),
        migrations.AddField(
            model_name='chathistory',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='customer_chat', to='bot.customer'),
        ),
        migrations.AddField(
            model_name='chathistory',
            name='talker',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_chat', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CarouselChatQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=bot.models.company_question_upload_path)),
                ('child_id', models.UUIDField(blank=True, editable=False, null=True)),
                ('option', models.CharField(blank=True, max_length=50, null=True)),
                ('text', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('number', models.CharField(blank=True, max_length=3, null=True)),
                ('chat_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_chat_question', to='bot.chatquestionnew')),
            ],
        ),
        migrations.CreateModel(
            name='BookedSlots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booked_slot', to='bot.timeslots')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('customer_care', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_name', to=settings.AUTH_USER_MODEL)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='question_name', to='bot.question')),
                ('question_tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='answer_tag_name', to='bot.questiontag')),
            ],
        ),
        migrations.CreateModel(
            name='ActiveBots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='active_bot', to='bot.company')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='active_bot', to='bot.takensubscription')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='bots',
            field=models.ManyToManyField(blank=True, related_name='users', to='bot.Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_name', to='bot.parentcompany'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
